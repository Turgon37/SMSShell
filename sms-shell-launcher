#!/usr/bin/python3
# -*- coding: utf8 -*-

# This file is a part of SMSShell
#
# Copyright (c) 2016-2018 Pierre GINDRAUD
#
# SMSShell is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# SMSShell is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with SMSShell. If not, see <http://www.gnu.org/licenses/>.

"""This is a simple launcher class for SMS Shell program
"""

# System imports
import getopt
import logging
import sys

# Projet Import
# Try to import from current directory
try:
    import SMSShell
except ImportError:
    sys.path.insert(1, "/usr/share")
    try:
        import SMSShell
    except ImportError as e:
        import traceback
        traceback.print_exc(file=sys.stdout)
        print("Impossible to load the SMSShell module")
        print(str(e))
        sys.exit(1)

# Global project declarations
logger = logging.getLogger('smsshell-launcher')


class SMSShellLauncher(object):
    """A simple launcher class of the SMSShell program

    Use a both system shell args and static configuration to run an instance
    See usage function below
    """

    def __init__(self):
        """Constructor : Build a launcher for main program
        """
        self.__conf = dict()
        self.__conf['log_level'] = 'INFO'
        self.__conf['daemon'] = False
        self.__conf['pid_file'] = None
        self.__conf['config_file'] = '/etc/smsshell.conf'

    @staticmethod
    def showVersion():
        """Print the program version
        """
        print("SMSShell version v" + SMSShell.version)

    def showUsage(self):
        """Prints command line options
        """
        print('Usage: ' + sys.argv[0] + ' [OPTIONS...]')
        print("""
SMSShell version v""" + SMSShell.version + """

Options :
    -c <FILE>           path of the configuration file
                        (default to """ + str(self.__conf['config_file']) + """)
    -p <FILE>           path of the pidfile
                        (default to """ + str(self.__conf['pid_file']) + """)
    -h, --help          display this help message
    -V, --version       print the version

Return code :
    0 Success

""")

    def __parseCmdLineOptions(self, options_list):
        """Parse input main options, and apply rules

        @param[dict] options_list : array of option key => value
        """
        for opt in options_list:
            if opt[0] == '-c':
                self.__conf['config_file'] = opt[1]
            if opt[0] == '-p':
                self.__conf['pid_file'] = opt[1]
            if opt[0] in ['-d', '--debug']:
                self.__conf['log_level'] = 'DEBUG'
            if opt[0] in ['-h', '--help']:
                self.showUsage()
                sys.exit(0)
            if opt[0] in ['-V', '--version']:
                SMSShellLauncher.showVersion()
                sys.exit(0)

    def start(self, argv):
        """ Entry point of the launcher

        @param[dict] argv : array of shell options given by main function
        """
        # read the only allowed command line options
        try:
            cmd_short_opts = 'hdVp:c:'
            cmd_long_opts = ['help', 'version', 'debug']
            given_options_list, args = getopt.getopt(argv[1:],
            cmd_short_opts,
            cmd_long_opts)
        except getopt.GetoptError as e:
            logger.fatal(e)
            self.showUsage()
            return 2
        except Exception as e:
            self.__logger.fatal('Problem during parameters interpretation :')
            self.__logger.fatal('   ' + str(e))
            return 1

        self.__parseCmdLineOptions(given_options_list)

        program = SMSShell.SMSShell(self.__conf['daemon'],
        self.__conf['log_level'])
        if not program.load(self.__conf['config_file']):
            logger.fatal('Unable to load configuration file')
            return 3
        return program.start(self.__conf['pid_file'])

##
# Run launcher as the main program
if __name__ == '__main__':
    launcher = SMSShellLauncher()
    sys.exit(launcher.start(sys.argv))
