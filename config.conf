[main]
; Define here the path to the pid file
pid = pid.pid

; Set LOG level for message filtering
; Values (String):
;   ERROR
;   WARN
;   INFO
;   DEBUG
; Default: INFO
log_level = INFO

; Set LOG target
; Values (String):
;   SYSLOG
;   STDERR
;   STDOUT
;   A path to a simple file
; Default STDOUT
log_target = STDOUT

; Set custom log format
; Don't forget to escape percent with a double percent
;log_format = %%(name)s[%%(process)d]: %%(levelname)s %%(message)s

; If theses options are defined the program's
; privileges will be downgrade to this user and group rights
;user =
;group =

; Main fonctionnal mode (DAEMON by default)
mode = DAEMON
;mode = STANDALONE

[daemon]
;; Configuration group dedicated to the daemon mode


; Select the type of receiver that will be used
receiver_type = unix

; Select the type of output that will be used
transmitter_type = python_gammu

; The name of the file which contains the parser implementation
message_parser = json

; The name of the metrics handler class
; Currently availables : prometheus, none
metrics_handler = prometheus

; The time to live for new created sessions
session_ttl = 60


[receiver]
;; this section is dedicated to the messages receiver

; The path to the fifo file
path = ./unix.sock

; The group that will own the receivers path
; this allow another group to read/write using the receiver path
; without to add it to the running service's group
group = gammu

; The umask to use when create fifo and socket
umask = 0117

; Listen queue
; the number of unaccepted connections that the system will allow before refusing new connections.
listen_queue = 10

[transmitter]
; The path to the gammu-smsdrc configuration of the currently running
; gammu-smsd daemon
smsdrc_configuration = /etc/gammu-smsdrc

; The umask to use for file creation
umask = 0117

[metrics]
; The port on which handler will expose its metrics (for pull based ones)
listen_port = 8100
; The address on which handler will expose its metrics (for pull based ones)
listen_address =
